/*
 * Copyright 2005 Hailang Thai, Minh Cuong Tran, Lesmana Zimmer
 *
 * This file is part of AdaLogo.
 *
 * AdaLogo is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * AdaLogo is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AdaLogo; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

//TODOlater
//data types (remove boolean/integer declaration)
//records

// FIXME fixed? 
// a : float := b + 10.0;

// FIXME AssignmentStatement is ambiguous in compare with ProcedureCallStatement. Because of (AssignmentStatement)Identifier ?
// FIXME a := b(1,2); --- fixed?

// TODO
// the using of arrays. fixed? see FunctionCallExpression (ambiguity)

// TODO
// records, pointer, string in the parsing part. fixed? 
// later: in the semantic part.

// TODO 
// allocation and with new.
// which method is implementing in ada?
// tombstone, reference-counting, etc. ?

// TODO later:
// if a or b and c then ...  --> possible in AdaLogo, but not in Ada 
// ada wants to have brakets. adalogo has priority-order: 
// not->and->xor->or

// TODO
// when does ada use BOXING '<>' ???

// TODO
// loop can also loop in discrete structures:
//   type a is (a, aa, aaa);
//   for i in a..aaa loop // is in bnf
// ** operator. (rechts-assoziativ)
// bnf from package. // is in bnf

// MCT
// TO MANY CHANGES HERE!!!
// TODO TEST TEST TEST
// TODO TEST TEST TEST
// TODO TEST TEST TEST

// TODO in the SEMANTIC PART
// # return at the right place and is visible and 
//   a function have a return at a right place whatever 
//   path you take
// # seperate float and integer expression.
// # special adalogo functions
// # special other functions like convert from float to integer.
//   cos, sin, tan
// # check the semantic: function- and procedurecalls 
//   have the same (length) of parameters
// # check the semantic: array: OutOfRangeException
// # ambiguity of ArrayExpression, FunctionCallExpression 
//   and constant variable.
// # overloading of functions and procedures? 
//   how to solve this with the symtab
// # how to illustrate an array in the VarMonitor --> hailang
// # get --> lesmana
// # turtle_down;
// # random with both border, at the moment: only the left border is in.
// # variable from a ForStatement cannot be manipulated, available at the moment.


options {
  // JJ OPTIONS
  STATIC = false;                        // (default: true)
  LOOKAHEAD = 1;                         // (default: 1)
  FORCE_LA_CHECK = false;                // (default: false)
  DEBUG_PARSER = false;                  // (default: false)
  DEBUG_LOOKAHEAD = false;               // (default: false)
  DEBUG_TOKEN_MANAGER = false;           // (default: false)

  CHOICE_AMBIGUITY_CHECK = 2;            // (default: 2)
  OTHER_AMBIGUITY_CHECK = 1;             // (default: 1)
// not available in javacc-4.0:  
//  OPTIMIZE_TOKEN_MANAGER = true;         // (default: ?)
  ERROR_REPORTING = true;                // (default: true)
  JAVA_UNICODE_ESCAPE = false;           // (default: false)
  UNICODE_INPUT = false;                 // (default: false)
  IGNORE_CASE = false;                   // (default: false)
  USER_TOKEN_MANAGER = false;            // (default: false)
  USER_CHAR_STREAM = false;              // (default: false)
  BUILD_PARSER = true;                   // (default: true)
  BUILD_TOKEN_MANAGER = true;            // (default: true)
  SANITY_CHECK = true;                   // (default: true)
  COMMON_TOKEN_ACTION = false;           // (default: false)
  CACHE_TOKENS = false;                  // (default: false)
  //OUTPUT_DIRECTORY = ;                 // (default: ./)


  // JJTREE OPTIONS
  NODE_FACTORY = true;                   // (default: false)
  NODE_USES_PARSER = true;               // (default: false)
  //STATIC = false;                      // (default: true)

  // parse tree node not should be derived from SimpleNode?
  MULTI = true;                          // (default: false)

  BUILD_NODE_FILES = true;               // (default: true)
  NODE_DEFAULT_VOID = false;             // (default: false)
  NODE_PACKAGE = "";                     // (default: "")
  NODE_PREFIX = "AST";                   // (default: "AST")
  NODE_SCOPE_HOOK = false;               // (default: false)
  VISITOR = true;                        // (default: false)
  VISITOR_EXCEPTION = "";                // (default: "")
  //JJTREE_OUTPUT_DIRECTORY = OUTPUT_DIRECTORY;
  // (default: use value of OUTPUT_DIRECTORY)

}

PARSER_BEGIN(Lang)

package adalogo.lang;

public class Lang {

  public static void main(String args[]) throws ParseException {
    Lang parser;
    if (args.length == 0) {
      parser = new Lang(System.in);
    } else if (args.length == 1) {
      try {
        parser = new Lang(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("File "+args[0]+" not found.");
        return;
      }
    } else {
      System.out.println("usage:        java Lang < inputfile");
      return;
    }

    //Lang parser = new Lang(System.in);
    SimpleNode n = parser.CompilationUnit();

    n.dump("+++");
  }
}

PARSER_END(Lang)

MORE :
{
    "--" : IN_SINGLE_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
    <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT>
MORE :
{
    < ~[] >
}

SPECIAL_TOKEN :
{
    < ( " " | "\t" | "\n" | "\r" )+ >
}

TOKEN [IGNORE_CASE] :
{
    <AND:           "and">
|   <ARRAY:         "array">
|   <BEGIN:         "begin">
|   <BOOLEAN:       "boolean">
|   <CHARACTER:     "character">
|   <DECLARE:       "declare">
|   <ELSE:          "else">
|   <ELSIF:         "elsif">
|   <END:           "end">
|   <EXIT:          "exit">
|   <FALSE:         "false">
|   <FLOAT:         "float">
|   <FOR:           "for">
|   <FUNCTION:      "function">
|   <IF:            "if">
|   <IN:            "in">
|   <INTEGER:       "integer">
|   <IS:            "is">
|   <LOOP:          "loop">
|   <MOD:           "mod">
|   <NOT:           "not">
|   <NULL:          "null">
|   <OF:            "of">
|   <OR:            "or">
|   <OTHERS:        "others">
|   <PROCEDURE:     "procedure">
|   <REM:           "rem">
|   <RETURN:        "return">
|   <REVERSE:       "reverse">
|   <STRING:        "string">
|   <THEN:          "then">
|   <TRUE:          "true">
|   <WHILE:         "while">
|   <WITH:          "with">
|   <USE:           "use">

// Ada95
|	<ABORT:		"abort">
|	<ABS:		"abs">
|	<ABSTRACT:	"abstract">
|	<ACCEPT:	"accept">
|	<ACCESS:	"access">
|	<ALIASED:	"aliased">
|	<ALL:		"all">
//|	<AND:		"and">
//|	<ARRAY:		"array">
|	<AT:		"at">
//|	<BEGIN:		"begin">
|	<BODY:		"body">
|	<CASE:		"case">
|	<CONSTANT:	"constant">
//|	<DECLARE:	"declare">
|	<DELAY:		"delay">
|	<DELTA:		"delta">
|	<DO:		"do">
//|	<ELSE:		"else">
//|	<ELSIF:		"elsif">
//|	<END:		"end">
|	<ENTRY:		"entry">
|	<EXCEPTION:	"exception">
//|	<EXIT:		"exit">
//|	<FOR:		"for">
//|	<FUNCTION:	"function">
|	<GENERIC:	"generic">
|	<GOTO:		"goto">
//|	<IF:		"if">
//|	<IN:		"in">
//|	<IS:		"is">
|	<LIMITED:	"limited">
//|	<LOOP:		"loop">
//|	<MOD:		"mod">
|	<NEW:		"new">
//|	<NOT:		"not">
//|	<NULL:		"null">
//|	<OF:		"of">
//|	<OR:		"or">
//|	<OTHERS:	"others">
|	<OUT:		"out">
|	<PACKAGE:	"package">
|	<PRAGMA:	"pragma">
|	<PRIVATE:	"private">
//|	<PROCEDURE:	"procedure">
|	<PROTECTED:	"protected">
|	<RAISE:		"raise">
|	<RANGE:		"range">
|	<RECORD:	"record">
//|	<REM:		"rem">
|	<RENAMES:	"renames">
|	<REQUEUE:	"requeue">
//|	<RETURN:	"return">
//|	<REVERSE:	"reverse">
|	<SELECT:	"select">
|	<SEPARATE:	"separate">
|	<SUBTASK:	"subtask">
|	<SUBTYPE:	"subtype">
|	<TAGGED:	"tagged">
|	<TASK:		"task">
|	<TERMINATE:	"terminate">
//|	<THEN:		"then">
|	<TYPE:		"type">
|	<UNTIL:		"until">
//|	<USE:		"use">
|	<WHEN:		"when">
//|	<WHILE:		"while">
//|	<WITH:		"with">
|	<XOR:		"xor">

}

TOKEN :
{
    <COLON:         ":">
|   <COMMA:         ",">
|   <DASH:          "-">
|   <DOT:           ".">
|   <DOT_DOT:       "..">
|   <EQ:            "=">
|   <GT:            ">">
|   <GT_EQ:         ">=">
|   <IS_ASSIGNED:   ":=">
|   <LPAREN:        "(">
|   <LT:            "<">
|   <LT_EQ:         "<=">
|   <NE:            "/=">
|   <PLUS:          "+">
|   <RIGHT_SHAFT:   "=>">
|   <RPAREN:        ")">
|   <SEMI:          ";">
|   <SLASH:         "/">
|   <STAR:          "*">

// Ada95
//|	<EQUAL:     "=">
//|	<NE:        "/=">
//|	<LT:        "<">
//|	<LT_EQ:     "<=">
//|	<GT:        ">">
//|	<GE:        ">=">
//|	<PLUS:      "+">
//|	<DASH:      "-">
|	<AMPERSAND: "&">
//|	<STAR:      "*">
//|	<SLASH:     "/">
|	<EXPON:     "^">
|	<LT_LT:     "<<">
|	<GT_GT:     ">>">
//|	<IS_ASSIGNED: ":=">
|	<BAR:       "|">
//|	<DOT:       ".">
|   <TIC:       "'">

}

TOKEN :
{
    <IDENTIFIER: ["A" - "Z","a" - "z","_"](["A" - "Z","a" - "z","_","0" - "9" ])* >
|   <INTEGER_LITERAL: (["0"-"9"])+ >
|   <STRING_LITERAL: "\"" (~["\""])* "\"" >
|   <CHARACTER_LITERAL: "'" (~["'","\n","\r"]) "'" >
    //TODO this is ok?
|   <FLOAT_LITERAL: <INTEGER_LITERAL> <DOT> <INTEGER_LITERAL> 
                    (["E","e"] (["+","-"])? <INTEGER_LITERAL> )? >  
}

SimpleNode CompilationUnit() :
{}
{
    (   WithClause()
    |   UseClause()
    )*

    (   ProcedureDeclaration()
    |   PackageDeclaration()
    )
    Semi() <EOF>
    {
        return jjtThis;
    }
}

void WithClause():
{}
{
    <WITH> Identifier() ( <DOT> Identifier() )* Semi()	
}

void UseClause():
{}
{
	<USE> Identifier() ( <DOT> Identifier() )* Semi()	
}

void Semi() :
{
    Token t;
}
{
    t = <SEMI>
    {
        jjtThis.setValue(t.image);
        jjtThis.setLine(t.beginLine);
        jjtThis.setColumn(t.beginColumn);
    }
}

void Declaration() :
{}
{
    (
        (   
            ProcedureDeclaration()
        |   FunctionDeclaration() 
        |   //LOOKAHEAD(3) 
            VariableDeclaration()
        //|   ArrayDeclaration() see VariableDeclaration
        |   TypeDeclaration()
        ) Semi()
    )*
}

void ProcedureDeclaration() :
{
    Token t;
}
{
    t = <PROCEDURE> Identifier() (DeclarationParameters())?
    (
    <IS>
        Declaration()
    <BEGIN>
        SequenceOfStatement()
    <END>
    )?
    {
        jjtThis.setValue(t.image);
        jjtThis.setLine(t.beginLine);
        jjtThis.setColumn(t.beginColumn);
    }
}

void PackageDeclaration() :
{}
{
    <PACKAGE> (Body())? Identifier() <IS>
        Declaration()
    <BEGIN>
        SequenceOfStatement()
    <END>
}

void Body() :
{}
{
	<BODY>
}

//-----------------------------------------------------------------------------
//general identifier, for everything
//-----------------------------------------------------------------------------
void Identifier():
{
    Token t;
}
{
    t = <IDENTIFIER>
    {
        jjtThis.setValue(t.image);
        jjtThis.setLine(t.beginLine);
        jjtThis.setColumn(t.beginColumn);
    }
}

void DeclarationParameters() :
{}
{
    <LPAREN>
    Parameter() ( <SEMI> Parameter() )*
    <RPAREN>
}

// TODO: Filter <IN> <OUT> later! (-> functions)
//     : Filter default-values later (only possible without <OUT>)
void Parameter() :
{
    Token t;
}
{
	Identifier() ( <COMMA> Identifier() )*
    t = <COLON> (ParameterMode())?
    Type()
    (
        <IS_ASSIGNED>
        TypeExpression()
    )?
    {
        jjtThis.setValue(t.image);
        jjtThis.setLine(t.beginLine);
        jjtThis.setColumn(t.beginColumn);
    }
}

void ParameterMode():
{}
{
        In() (Out())? 
    |   Out()
}

void In():
{}
{
    <IN>
}

void Out():
{}
{
    <OUT>
}

void Type() :
{}
{
    (   Identifier()
    |   Boolean()
    |   Character()
    |   Float()
    |   Integer()
    |   String()
    )
}

void TypeExpression() :
{}
{
        BooleanExpression()
    |   CharacterLiteral()
    |   StringLiteral()
}

void Boolean() : 
{
    Token t;	
}
{
    t = <BOOLEAN>
    
    {
        jjtThis.setValue(t.image);
        jjtThis.setLine(t.beginLine);
        jjtThis.setColumn(t.beginColumn);
    }
}

void Character():
{
    Token t;	
}
{
	t = <CHARACTER>	
    {
        jjtThis.setValue(t.image);
        jjtThis.setLine(t.beginLine);
        jjtThis.setColumn(t.beginColumn);
    }
}

void Float() :
{
    Token t;	
}
{
    t = <FLOAT>
    {
        jjtThis.setValue(t.image);
        jjtThis.setLine(t.beginLine);
        jjtThis.setColumn(t.beginColumn);
    }
}

void Integer() :
{
    Token t;	
}
{
    t = <INTEGER>
    {
        jjtThis.setValue(t.image);
        jjtThis.setLine(t.beginLine);
        jjtThis.setColumn(t.beginColumn);
    }
}

void String() :
{
    Token t;	
}
{
    t = <STRING>
    {
        jjtThis.setValue(t.image);
        jjtThis.setLine(t.beginLine);
        jjtThis.setColumn(t.beginColumn);
    }
}

void FunctionDeclaration() :
{
    Token t;
}
{
    t = <FUNCTION> Identifier() (DeclarationParameters())? 
        <RETURN> Type()
    (
    <IS>
        Declaration()
    <BEGIN>
        SequenceOfStatement()
    <END>
    )?
    {
        jjtThis.setValue(t.image);
        jjtThis.setLine(t.beginLine);
        jjtThis.setColumn(t.beginColumn);
    }
}

void VariableDeclaration() :
{
    Token t;
}
{
    Identifier() 
    ( <COMMA> Identifier() )* 
    t = <COLON>
    (
        Type()
        (
            <IS_ASSIGNED>
            TypeExpression()
        )?
    |   ArrayDeclaration()
    )
    
    {
        jjtThis.setValue(t.image);
        jjtThis.setLine(t.beginLine);
        jjtThis.setColumn(t.beginColumn);
    }
}

// TODO check this again.
void ArrayDeclaration():
{
    Token t;	
}
{
	//Identifier()
    //( <COMMA> Identifier() )*  // ambiguity with VariableDeclaration
    //t = <COLON>
    <ARRAY> 
    <LPAREN>
    IntegerExpression()
    <DOT_DOT>
    IntegerExpression()
    (
        <COMMA>
        IntegerExpression()
        <DOT_DOT>
        IntegerExpression()
    )*
    <RPAREN>
    <OF>
    Type()
    (
    <IS_ASSIGNED> 
        (
	        Identifier()
	    |   ArrayDeclarationOthers()
	    )
    )?    
}

void ArrayDeclarationOthers():
{}
{
    <LPAREN>  
    <OTHERS> 
    <RIGHT_SHAFT>
    (
    	LOOKAHEAD(2)
    	TypeExpression()
	|   ArrayDeclarationOthers()    
    )
    <RPAREN>
}

void TypeDeclaration() :
{}
{
	<TYPE> Identifier()
    (
        <IS>
        (
            PointerDeclaration()
        |   DiscreteDeclaration()
        |   RecordDeclaration()
        )
    )?
}

void PointerDeclaration() : 
{}
{
    <ACCESS> Type() 
}

void DiscreteDeclaration() :
{}
{
	<LPAREN> Identifier() (<COMMA> Identifier())* <RPAREN>
}

void RecordDeclaration() :
{}
{
    <RECORD> ( VariableDeclaration() Semi() )+ <END> <RECORD>
|   <NULL> <RECORD>
}

void SequenceOfStatement() :
{}
{
    (
        (
            // this is because of ProcedureCallStatement 
            //AssignmentStatement() 
      //|   
            CaseStatement()
        |   DeclareBlock()    
        |   ExitStatement()
        |   ForStatement()
        |   IfStatement()
        |   LoopStatement()
        |   NullStatement()
        |   ProcedureCallStatement()
        |   ReturnStatement()
        |   WhileStatement()
        )
        Semi()
    )+
}

void CharacterLiteral() :
{
    Token t;
}
{
    t = <CHARACTER_LITERAL>
    {
        jjtThis.setValue(t.image);
        jjtThis.setLine(t.beginLine);
        jjtThis.setColumn(t.beginColumn);
    }
}


void StringLiteral() :
{
    Token t;
}
{
    t = <STRING_LITERAL>
    {
        jjtThis.setValue(t.image);
        jjtThis.setLine(t.beginLine);
        jjtThis.setColumn(t.beginColumn);
    }
}

//-----------------------------------------------------------------------------
// assignment
//-----------------------------------------------------------------------------

void AssignmentStatement():
{
    Token t;
}
{
	/* see procedurecallstatement
	Identifier() 
	(
	    <LPAREN> IntegerExpression() ( <COMMA> IntegerExpression() )* <RPAREN>
	)?
	*/ 
    t = <IS_ASSIGNED>
    TypeExpression()
    {
        jjtThis.setValue(t.image);
        jjtThis.setLine(t.beginLine);
        jjtThis.setColumn(t.beginColumn);
    }
}

void CaseStatement(): 
{}
{
    <CASE> Identifier()( <DOT> Identifier() )* <IS>
    (    
        LOOKAHEAD(2) 
        <WHEN> CaseValues() <RIGHT_SHAFT> 
        SequenceOfStatement() 
    )*
    (   <WHEN> <OTHERS> <RIGHT_SHAFT> 
        SequenceOfStatement() 
    )?
    <END> <CASE>
}

// FIXME
void CaseValues():
{}
{
	(
        BooleanExpression()
        (<DOT_DOT> BooleanExpression())? 
    )
    (   <BAR> 
        (
            BooleanExpression()
            (<DOT_DOT> BooleanExpression())?
        )
    )*
}

//-----------------------------------------------------------------------------
// DeclareBlock
//-----------------------------------------------------------------------------

void DeclareBlock():
{
    Token t;
}
{
    t = <DECLARE> Declaration() <BEGIN> SequenceOfStatement() <END>
}

//-----------------------------------------------------------------------------
// Statements
//-----------------------------------------------------------------------------

void ExitStatement():
{
    Token t;
}
{
    t = <EXIT>
    {
        jjtThis.setValue(t.image);
        jjtThis.setLine(t.beginLine);
        jjtThis.setColumn(t.beginColumn);
    }
}

void ForStatement():
{
    Token t;
}
{
    t = <FOR> Identifier() <IN> (ForReverse())? IntegerExpression() <DOT_DOT> IntegerExpression()
    LoopStatement()
    {
        jjtThis.setValue(t.image);
        jjtThis.setLine(t.beginLine);
        jjtThis.setColumn(t.beginColumn);
    }
}

void ForReverse():
{}
{
    <REVERSE>
}

void IfStatement():
{
    Token t;
}
{
    t = <IF> BooleanExpression() <THEN>
        SequenceOfStatement()
    (ElsifPart())*
    (ElsePart())?
    <END> <IF>
    {
        jjtThis.setValue(t.image);
        jjtThis.setLine(t.beginLine);
        jjtThis.setColumn(t.beginColumn);
    }
}

void ElsifPart():
{
    Token t;
}
{
    t = <ELSIF> BooleanExpression() <THEN>
        SequenceOfStatement()
    {
        jjtThis.setValue(t.image);
        jjtThis.setLine(t.beginLine);
        jjtThis.setColumn(t.beginColumn);
    }
}

void ElsePart():
{
    Token t;
}
{
    t = <ELSE>
        SequenceOfStatement()
    {
        jjtThis.setValue(t.image);
        jjtThis.setLine(t.beginLine);
        jjtThis.setColumn(t.beginColumn);
    }
}

void NullStatement():
{}
{
    <NULL>
}

void LoopStatement():
{
    Token t;
}
{
    t = <LOOP>
        SequenceOfStatement()
    <END> <LOOP>
    {
        jjtThis.setValue(t.image);
        jjtThis.setLine(t.beginLine);
        jjtThis.setColumn(t.beginColumn);
    }
}

void ProcedureCallStatement():
{}
{
    Identifier()
    (CallParameters())?
    // FIXME
    //(<DOT> Identifier() )*
    (AssignmentStatement())?  
    // TRICKY!
    // because of the same head of 
    // procedurecallstatement and assignmentstatement
}

void CallParameters():
{}
{
    <LPAREN>
    TypeExpression()
    ( <COMMA> TypeExpression() )*
    <RPAREN>
}

void ReturnStatement():
{}
{
    <RETURN> (TypeExpression())?
}

void WhileStatement():
{
    Token t;
}
{
    t = <WHILE> BooleanExpression()
    LoopStatement()
    {
        jjtThis.setValue(t.image);
        jjtThis.setLine(t.beginLine);
        jjtThis.setColumn(t.beginColumn);
    }
}

//-----------------------------------------------------------------------------
// BEGIN of BooleanExpression
//-----------------------------------------------------------------------------

void BooleanExpression() #void:
{}
{
    OrExpression()
}

void OrExpression() #void:
{}
{
    XorExpression()
    (
        <OR> XorExpression() #OrNode(2)
    )*
}

void XorExpression() #void:
{}
{
    AndExpression()
    (
        <XOR> AndExpression() #XorNode(2)
    )*
}


void AndExpression() #void:
{}
{
    UnaryBooleanExpression()
    (
        <AND> UnaryBooleanExpression() #AndNode(2)
    )*
}

void UnaryBooleanExpression() #void:
{}
{
    <NOT>
    (
        LOOKAHEAD(3)
        EqualityExpression()
    |   BooleanLiteral()
    |   LOOKAHEAD(3) 
        <LPAREN> BooleanExpression() <RPAREN>
    |   FunctionCallExpression()
    )   #NotNode(1)

|   LOOKAHEAD(3)
    EqualityExpression()
|   BooleanLiteral()
|   LOOKAHEAD(3)
    <LPAREN> BooleanExpression() <RPAREN>
|   FunctionCallExpression()
}


void EqualityExpression() #void:
{}
{
    RelationalExpression()
    (
        <EQ> RelationalExpression() #EqualNode(2)
    |   <NE> RelationalExpression() #NotEqualNode(2)
    )?
}

void RelationalExpression() #void:
{}
{
    IntegerExpression()
    (
        <GT>    IntegerExpression() #GreaterThanNode(2)
    |   <GT_EQ> IntegerExpression() #GreaterEqualNode(2)
    |   <LT>    IntegerExpression() #LessThanNode(2)
    |   <LT_EQ> IntegerExpression() #LessEqualNode(2)
    )?
}
	
void BooleanLiteral() #void:
{}
{
  <TRUE> #TrueNode
|
  <FALSE> #FalseNode
}

//-----------------------------------------------------------------------------
//BEGIN of IntegerExpression
//-----------------------------------------------------------------------------

void IntegerExpression() #void:
{}
{
    AdditiveExpression()
}

void AdditiveExpression() #void:
{}
{
    MultiplicativeExpression()
    (
            <PLUS> MultiplicativeExpression() #AdditionNode(2)
        |   <DASH> MultiplicativeExpression() #SubtractionNode(2)
    )*
}

void MultiplicativeExpression() #void:
{}
{
    UnaryIntegerExpression()
    (
            <STAR>  UnaryIntegerExpression() #MultiplicationNode(2)
        |   <SLASH> UnaryIntegerExpression() #DivisionNode(2)
        |   <MOD>   UnaryIntegerExpression() #ModNode(2)
        |   <REM>   UnaryIntegerExpression() #RemNode(2)
    )*
}

void UnaryIntegerExpression() #void:
{}
{
    <DASH>
    (
        IntegerLiteral()
    |   FloatLiteral()    
    |   <LPAREN> IntegerExpression() <RPAREN>
    |   FunctionCallExpression()
    ) #DashNode(1)

|   IntegerLiteral()
|   FloatLiteral()
|   <LPAREN> IntegerExpression() <RPAREN>
|   FunctionCallExpression()
}

void IntegerLiteral():
{
    Token t;
}
{
    t = <INTEGER_LITERAL>
    {
        jjtThis.setValue(t.image);
        jjtThis.setLine(t.beginLine);
        jjtThis.setColumn(t.beginColumn);
    }
}

void FloatLiteral():
{
    Token t;
}
{
    t = <FLOAT_LITERAL>
    {
        jjtThis.setValue(t.image);
    }
}

// FIXME
void FunctionCallExpression():
{}
{
    Identifier()
    (   CallParameters()
    |   ( <DOT> Identifier() )+
    )?
}